// Code generated by MockGen. DO NOT EDIT.
// Source: ./config.go
//
// Generated by this command:
//
//	mockgen -destination=./mock/config.go -source=./config.go ConfigProvider
//

// Package mock_resolver is a generated GoMock package.
package mock_resolver

import (
	reflect "reflect"

	resolver "github.com/stackitcloud/stackit-cert-manager-webhook/internal/resolver"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
)

// MockConfigProvider is a mock of ConfigProvider interface.
type MockConfigProvider struct {
	ctrl     *gomock.Controller
	recorder *MockConfigProviderMockRecorder
}

// MockConfigProviderMockRecorder is the mock recorder for MockConfigProvider.
type MockConfigProviderMockRecorder struct {
	mock *MockConfigProvider
}

// NewMockConfigProvider creates a new mock instance.
func NewMockConfigProvider(ctrl *gomock.Controller) *MockConfigProvider {
	mock := &MockConfigProvider{ctrl: ctrl}
	mock.recorder = &MockConfigProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigProvider) EXPECT() *MockConfigProviderMockRecorder {
	return m.recorder
}

// LoadConfig mocks base method.
func (m *MockConfigProvider) LoadConfig(cfgJSON *v1.JSON) (resolver.StackitDnsProviderConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadConfig", cfgJSON)
	ret0, _ := ret[0].(resolver.StackitDnsProviderConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadConfig indicates an expected call of LoadConfig.
func (mr *MockConfigProviderMockRecorder) LoadConfig(cfgJSON any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadConfig", reflect.TypeOf((*MockConfigProvider)(nil).LoadConfig), cfgJSON)
}
