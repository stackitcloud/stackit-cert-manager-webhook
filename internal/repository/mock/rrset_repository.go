// Code generated by MockGen. DO NOT EDIT.
// Source: ./rrset_repository.go
//
// Generated by this command:
//
//	mockgen -destination=./mock/rrset_repository.go -source=./rrset_repository.go RRSetRepositoryFactory
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	repository "github.com/stackitcloud/stackit-cert-manager-webhook/internal/repository"
	dns "github.com/stackitcloud/stackit-sdk-go/services/dns"
	gomock "go.uber.org/mock/gomock"
)

// MockRRSetRepository is a mock of RRSetRepository interface.
type MockRRSetRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRRSetRepositoryMockRecorder
}

// MockRRSetRepositoryMockRecorder is the mock recorder for MockRRSetRepository.
type MockRRSetRepositoryMockRecorder struct {
	mock *MockRRSetRepository
}

// NewMockRRSetRepository creates a new mock instance.
func NewMockRRSetRepository(ctrl *gomock.Controller) *MockRRSetRepository {
	mock := &MockRRSetRepository{ctrl: ctrl}
	mock.recorder = &MockRRSetRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRRSetRepository) EXPECT() *MockRRSetRepositoryMockRecorder {
	return m.recorder
}

// CreateRRSet mocks base method.
func (m *MockRRSetRepository) CreateRRSet(ctx context.Context, rrSet dns.RecordSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRRSet", ctx, rrSet)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRRSet indicates an expected call of CreateRRSet.
func (mr *MockRRSetRepositoryMockRecorder) CreateRRSet(ctx, rrSet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRRSet", reflect.TypeOf((*MockRRSetRepository)(nil).CreateRRSet), ctx, rrSet)
}

// DeleteRRSet mocks base method.
func (m *MockRRSetRepository) DeleteRRSet(ctx context.Context, rrSetId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRRSet", ctx, rrSetId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRRSet indicates an expected call of DeleteRRSet.
func (mr *MockRRSetRepositoryMockRecorder) DeleteRRSet(ctx, rrSetId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRRSet", reflect.TypeOf((*MockRRSetRepository)(nil).DeleteRRSet), ctx, rrSetId)
}

// FetchRRSetForZone mocks base method.
func (m *MockRRSetRepository) FetchRRSetForZone(ctx context.Context, rrSetName, rrSetType string) (*dns.RecordSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchRRSetForZone", ctx, rrSetName, rrSetType)
	ret0, _ := ret[0].(*dns.RecordSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchRRSetForZone indicates an expected call of FetchRRSetForZone.
func (mr *MockRRSetRepositoryMockRecorder) FetchRRSetForZone(ctx, rrSetName, rrSetType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchRRSetForZone", reflect.TypeOf((*MockRRSetRepository)(nil).FetchRRSetForZone), ctx, rrSetName, rrSetType)
}

// UpdateRRSet mocks base method.
func (m *MockRRSetRepository) UpdateRRSet(ctx context.Context, rrSet dns.RecordSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRRSet", ctx, rrSet)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRRSet indicates an expected call of UpdateRRSet.
func (mr *MockRRSetRepositoryMockRecorder) UpdateRRSet(ctx, rrSet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRRSet", reflect.TypeOf((*MockRRSetRepository)(nil).UpdateRRSet), ctx, rrSet)
}

// MockRRSetRepositoryFactory is a mock of RRSetRepositoryFactory interface.
type MockRRSetRepositoryFactory struct {
	ctrl     *gomock.Controller
	recorder *MockRRSetRepositoryFactoryMockRecorder
}

// MockRRSetRepositoryFactoryMockRecorder is the mock recorder for MockRRSetRepositoryFactory.
type MockRRSetRepositoryFactoryMockRecorder struct {
	mock *MockRRSetRepositoryFactory
}

// NewMockRRSetRepositoryFactory creates a new mock instance.
func NewMockRRSetRepositoryFactory(ctrl *gomock.Controller) *MockRRSetRepositoryFactory {
	mock := &MockRRSetRepositoryFactory{ctrl: ctrl}
	mock.recorder = &MockRRSetRepositoryFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRRSetRepositoryFactory) EXPECT() *MockRRSetRepositoryFactoryMockRecorder {
	return m.recorder
}

// NewRRSetRepository mocks base method.
func (m *MockRRSetRepositoryFactory) NewRRSetRepository(config repository.Config, zoneId string) (repository.RRSetRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRRSetRepository", config, zoneId)
	ret0, _ := ret[0].(repository.RRSetRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRRSetRepository indicates an expected call of NewRRSetRepository.
func (mr *MockRRSetRepositoryFactoryMockRecorder) NewRRSetRepository(config, zoneId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRRSetRepository", reflect.TypeOf((*MockRRSetRepositoryFactory)(nil).NewRRSetRepository), config, zoneId)
}
