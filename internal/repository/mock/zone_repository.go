// Code generated by MockGen. DO NOT EDIT.
// Source: ./zone_repository.go
//
// Generated by this command:
//
//	mockgen -destination=./mock/zone_repository.go -source=./zone_repository.go ZoneRepositoryFactory
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	repository "github.com/stackitcloud/stackit-cert-manager-webhook/internal/repository"
	dns "github.com/stackitcloud/stackit-sdk-go/services/dns"
	gomock "go.uber.org/mock/gomock"
)

// MockZoneRepository is a mock of ZoneRepository interface.
type MockZoneRepository struct {
	ctrl     *gomock.Controller
	recorder *MockZoneRepositoryMockRecorder
}

// MockZoneRepositoryMockRecorder is the mock recorder for MockZoneRepository.
type MockZoneRepositoryMockRecorder struct {
	mock *MockZoneRepository
}

// NewMockZoneRepository creates a new mock instance.
func NewMockZoneRepository(ctrl *gomock.Controller) *MockZoneRepository {
	mock := &MockZoneRepository{ctrl: ctrl}
	mock.recorder = &MockZoneRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZoneRepository) EXPECT() *MockZoneRepositoryMockRecorder {
	return m.recorder
}

// FetchZone mocks base method.
func (m *MockZoneRepository) FetchZone(ctx context.Context, zoneDnsName string) (*dns.Zone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchZone", ctx, zoneDnsName)
	ret0, _ := ret[0].(*dns.Zone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchZone indicates an expected call of FetchZone.
func (mr *MockZoneRepositoryMockRecorder) FetchZone(ctx, zoneDnsName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchZone", reflect.TypeOf((*MockZoneRepository)(nil).FetchZone), ctx, zoneDnsName)
}

// MockZoneRepositoryFactory is a mock of ZoneRepositoryFactory interface.
type MockZoneRepositoryFactory struct {
	ctrl     *gomock.Controller
	recorder *MockZoneRepositoryFactoryMockRecorder
}

// MockZoneRepositoryFactoryMockRecorder is the mock recorder for MockZoneRepositoryFactory.
type MockZoneRepositoryFactoryMockRecorder struct {
	mock *MockZoneRepositoryFactory
}

// NewMockZoneRepositoryFactory creates a new mock instance.
func NewMockZoneRepositoryFactory(ctrl *gomock.Controller) *MockZoneRepositoryFactory {
	mock := &MockZoneRepositoryFactory{ctrl: ctrl}
	mock.recorder = &MockZoneRepositoryFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZoneRepositoryFactory) EXPECT() *MockZoneRepositoryFactoryMockRecorder {
	return m.recorder
}

// NewZoneRepository mocks base method.
func (m *MockZoneRepositoryFactory) NewZoneRepository(config repository.Config) (repository.ZoneRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewZoneRepository", config)
	ret0, _ := ret[0].(repository.ZoneRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewZoneRepository indicates an expected call of NewZoneRepository.
func (mr *MockZoneRepositoryFactoryMockRecorder) NewZoneRepository(config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewZoneRepository", reflect.TypeOf((*MockZoneRepositoryFactory)(nil).NewZoneRepository), config)
}
