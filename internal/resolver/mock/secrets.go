// Code generated by MockGen. DO NOT EDIT.
// Source: ./secrets.go
//
// Generated by this command:
//
//	mockgen -destination=./mock/secrets.go -source=./secrets.go SecretFetcher
//

// Package mock_resolver is a generated GoMock package.
package mock_resolver

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSecretFetcher is a mock of SecretFetcher interface.
type MockSecretFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockSecretFetcherMockRecorder
}

// MockSecretFetcherMockRecorder is the mock recorder for MockSecretFetcher.
type MockSecretFetcherMockRecorder struct {
	mock *MockSecretFetcher
}

// NewMockSecretFetcher creates a new mock instance.
func NewMockSecretFetcher(ctrl *gomock.Controller) *MockSecretFetcher {
	mock := &MockSecretFetcher{ctrl: ctrl}
	mock.recorder = &MockSecretFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretFetcher) EXPECT() *MockSecretFetcherMockRecorder {
	return m.recorder
}

// StringFromSecret mocks base method.
func (m *MockSecretFetcher) StringFromSecret(namespace, secretName, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StringFromSecret", namespace, secretName, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StringFromSecret indicates an expected call of StringFromSecret.
func (mr *MockSecretFetcherMockRecorder) StringFromSecret(namespace, secretName, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StringFromSecret", reflect.TypeOf((*MockSecretFetcher)(nil).StringFromSecret), namespace, secretName, key)
}
