# The GroupName here is used to identify your company or business unit that
# created this webhook.
# For example, this may be "acme.mycompany.com".
# This name will need to be referenced in each Issuer's `webhook` stanza to
# inform cert-manager of where to send ChallengePayload resources in order to
# solve the DNS01 challenge.
# This group name should be **unique**, hence using your own company's domain
# here is recommended.
# -- The GroupName here is used to identify your company or business unit that created this webhook. Therefore, it should be acme.stackit.de.
groupName: acme.stackit.de

# -- Replicas for the webhook. Since it is a stateless application server that sends requests you can increase the number as you want. Most of the time however, 1 replica is enough.
replicaCount: 1

# -- Meta information of the cert-manager itself.
certManager:
  # -- namespace where the webhook should be installed. Cert-Manager and the webhook should be in the same namespace.
  namespace: cert-manager
  # -- service account name for the cert-manager.
  serviceAccountName: cert-manager

# -- Image information for the webhook.
image:
  # -- repository of the image.
  repository: ghcr.io/stackitcloud/stackit-cert-manager-webhook
  # Overrides the image tag whose default is {{ .Chart.AppVersion }}
  tag: ""
  # -- pull policy of the image.
  pullPolicy: IfNotPresent
# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []

# -- Webhook configuration.
nameOverride: ""
# -- Fullname override of the webhook.
fullnameOverride: ""

# -- Configuration for the stackit service account keys.
stackitSaAuthentication:
  # -- enabled flag for the stackit service account keys.
  enabled: false
  # -- secret where the service account key is stored. Should be in the same namespace as the webhook since it will be mounted into the pod.
  secretName: stackit-sa-authentication
  # -- key of the service account key in the secret. Which will be later be used to load in keys in the pod as well.
  fileName: sa.json
  # -- Path where the secret will be mounted in the pod.
  mountPath: /var/run/secrets/stackit

# -- Configuration for the webhook service.
service:
  # -- type of the service.
  type: ClusterIP
  # -- port of the service.
  port: 443

# -- Kubernetes resources for the webhook. Usually limits.cpu=100m, limits.memory=128Mi, requests.cpu=100m, requests.memory=128Mi is enough for the webhook.
resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
#  cpu: 100m
#  memory: 128Mi

# -- Node selector for the webhook.
nodeSelector: {}

# -- Tolerations for the webhook.
tolerations: []

affinity: {}

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop: ["ALL"]
  seccompProfile:
    type: RuntimeDefault

podSecurityContext:
  runAsGroup: 1000
  runAsUser: 1000
  runAsNonRoot: true
  seccompProfile:
    type: RuntimeDefault

additionalVolumes: []
#   - name: extra-config
#     configMap:
#       name: extra-config-map

additionalVolumeMounts: []
#   - name: extra-config
#     mountPath: /etc/extra-config
#     readOnly: true

# -- Placeholder for additional env-variables. Apply via "--set"-command  or 
# -- delete the next line and add your variables as in the commented example below.
extraEnv: []
# extraEnv:
#   - name: HTTP_PROXY
#     value: "127.0.0.1"
#   - name: ANOTHER_VAR
#     value: "some-value"
